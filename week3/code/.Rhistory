setwd("~/Documents/CMEECourseWork/groupwork/code")
load("../data/KeyWestAnnualMeanTemperature.RData") # load the annual temperature dataset
View(ats)
Years <- length(ats$Year)
cc <- c()
new_ats <- data.frame(ats[1:(Years-1),], ats[2:Years,])
cc <- cor(x = new_ats[,2], y = new_ats[,4], use = "everything", method = "pearson")
n <- 300
rcc <- c()
for (i in 1:n){
new_ats <- new_ats[sample(1:(Years-1), (Years-1)), ]
# repeat this calculation 100 times, each time randomly reshuffling the temperatures
temp <- cor(x = new_ats[,2], y = new_ats[,4], use = "everything", method = "pearson")
# recalculate the correlation coefficient and store it in the "temp" variable
rcc <- append(rcc, temp) # append "temp" variable to rcc
}
count <- 0
for (j in rcc){
if(j > cc){ # if any element in rcc is greater than cc, count plus one
count <- count + 1
}
}
p_value <- count / n # calculate the fraction of the random correlation coefficients greater than the observed one
View(new_ats)
rm(list=ls()) # remove global environment
load("../data/KeyWestAnnualMeanTemperature.RData") # load the annual temperature dataset
ls()
Years <- length(ats$Year)
cc <- c()
new_ats <- data.frame(ats[1:(Years-1),], ats[2:Years,])
cc <- cor(x = new_ats[,2], y = new_ats[,4], use = "everything", method = "pearson")
View(ats)
View(new_ats)
setwd("~/Documents/CMEECourseWork/week3/")
setwd("~/Documents/CMEECourseWork/week3/code")
?var()
## Build a random matrix
M <- matrix(rnorm(100), 10, 10)
## Take the mean of each row
RowMeans <- apply(M, 1, mean)
print(RowMeans)
## Take the variance of each row
RowVars <- apply(M, 1, var)
print(RowVars)
## Take the mean of each column
ColMeans <- apply(M, 2, mean)
print(ColMeans)
SomeOperation <- function(v){ # function SomeOperation takes as input v
if (sum(v) > 0){ # if the sum of v is greater than zero
return (v * 100) # multiply all the values in v by 100 and return them
}
return (v)
}
M <- matrix(rnorm(100), 10, 10) # build a random matrix
print(apply(M, 1, SomeOperation)) # take the function SomeOperation of each row
Exponential <- function(N0 = 1, r = 1, generations = 10){
# Runs a simulation of exponential growth
# Returns a vector of length generations
N <- rep(NA, generations)  # Creates a vector of NA
N[1] <- N0 # initialize N[1]
for (t in 2:generations){
N[t] <- N[t-1] * exp(r)
browser()
}
return (N)
}
plot(Exponential(), type = "l", main = "Exponential growth") # plot the figure
q
q
q
setwd("~/Documents/CMEECourseWork/groupwork/code")
rm(list=ls()) # remove global environment
load("../data/KeyWestAnnualMeanTemperature.RData") # load the annual temperature dataset
ls()
View(ats)
View(ats)
nrow(ats)
ats[1:nrow(ats)-1,]
new_ats <- data.frame(ats[1:nrow(ats)-1,], ats[2:nrow(ats),])
View(new_ats)
View(new_ats)
a <- [1,2,3,4,5]
a <- c(1,2,3,4,5)
a
sample(a)
new_ats <- new_ats[sample(nrow(new_ats)), ]
View(new_ats)
new_ats <- new_ats[sample(nrow(new_ats)), ]
rm(list=ls()) # remove global environment
load("../data/KeyWestAnnualMeanTemperature.RData") # load the annual temperature dataset
ls()
new_ats <- data.frame(ats[1:nrow(ats)-1, ], ats[2:nrow(ats), ])
cc <- cor(x = new_ats[ ,2], y = new_ats[ ,4], use = "everything", method = "pearson")
# compute the appropriate correlation coefficient between years and Temperature
n <- 200
rcc <- c()
for (i in 1:n){
new_ats <- new_ats[sample(nrow(new_ats)), ]
# repeat this calculation 100 times, each time randomly reshuffling the temperatures
temp <- cor(x = new_ats[ ,2], y = new_ats[ ,4], use = "everything", method = "pearson")
# recalculate the correlation coefficient and store it in the "temp" variable
rcc <- append(rcc, temp) # append "temp" variable to rcc
}
count <- 0
for (j in rcc){
if(j > cc){ # if any element in rcc is greater than cc, count plus one
count <- count + 1
}
}
p_value <- count / n # calculate the fraction of the random correlation coefficients greater than the observed one
print(paste("The approximate, asymptotic p-value is", p_value)) # print the p-value
rm(list=ls()) # remove global environment
load("../data/KeyWestAnnualMeanTemperature.RData") # load the annual temperature dataset
ls()
new_ats <- data.frame(ats[1:nrow(ats)-1, ], ats[2:nrow(ats), ])
cc <- cor(x = new_ats[ ,2], y = new_ats[ ,4], use = "everything", method = "pearson")
# compute the appropriate correlation coefficient between years and Temperature
n <- 200
rcc <- c()
for (i in 1:n){
new_ats <- new_ats[sample(nrow(new_ats)), ]
# repeat this calculation 100 times, each time randomly reshuffling the temperatures
temp <- cor(x = new_ats[ ,2], y = new_ats[ ,4], use = "everything", method = "pearson")
# recalculate the correlation coefficient and store it in the "temp" variable
rcc <- append(rcc, temp) # append "temp" variable to rcc
}
count <- 0
for (j in rcc){
if(j > cc){ # if any element in rcc is greater than cc, count plus one
count <- count + 1
}
}
p_value <- count / n # calculate the fraction of the random correlation coefficients greater than the observed one
print(paste("The approximate, asymptotic p-value is", p_value)) # print the p-value
rm(list=ls()) # remove global environment
load("../data/KeyWestAnnualMeanTemperature.RData") # load the annual temperature dataset
ls()
new_ats <- data.frame(ats[1:nrow(ats)-1, ], ats[2:nrow(ats), ])
cc <- cor(x = new_ats[ ,2], y = new_ats[ ,4], use = "everything", method = "pearson")
# compute the appropriate correlation coefficient between years and Temperature
n <- 200
rcc <- c()
for (i in 1:n){
new_ats <- new_ats[sample(nrow(new_ats)), ]
# repeat this calculation 100 times, each time randomly reshuffling the temperatures
temp <- cor(x = new_ats[ ,2], y = new_ats[ ,4], use = "everything", method = "pearson")
# recalculate the correlation coefficient and store it in the "temp" variable
rcc <- append(rcc, temp) # append "temp" variable to rcc
}
count <- 0
for (j in rcc){
if(j > cc){ # if any element in rcc is greater than cc, count plus one
count <- count + 1
}
}
p_value <- count / n # calculate the fraction of the random correlation coefficients greater than the observed one
print(paste("The approximate, asymptotic p-value is", p_value)) # print the p-value
InputFileName <- tree
InputFileName <- "tree"
paste("../results/", InputFileName, "_treeheights.csv")
paste("../results/", InputFileName, "_treeheights.csv", sep = "")
rm(list=ls()) # remove global environment
load("../data/KeyWestAnnualMeanTemperature.RData") # load the annual temperature dataset
ls()
new_ats <- data.frame(ats[1:nrow(ats)-1, ], ats[2:nrow(ats), ])
cc <- cor(x = new_ats[ ,2], y = new_ats[ ,4], use = "everything", method = "pearson")
# compute the appropriate correlation coefficient between years and Temperature
n <- 200
rcc <- c()
for (i in 1:n){
new_ats <- new_ats[sample(nrow(new_ats)), ]
# repeat this calculation 100 times, each time randomly reshuffling the temperatures
temp <- cor(x = new_ats[ ,2], y = new_ats[ ,4], use = "everything", method = "pearson")
# recalculate the correlation coefficient and store it in the "temp" variable
rcc <- append(rcc, temp) # append "temp" variable to rcc
}
count <- 0
for (j in rcc){
if(j > cc){ # if any element in rcc is greater than cc, count plus one
count <- count + 1
}
}
p_value <- count / n # calculate the fraction of the random correlation coefficients greater than the observed one
print(paste("The approximate, asymptotic p-value is", p_value)) # print the p-value
setwd("~/Documents/CMEECourseWork/week3/code")
load("../data/GPDDFiltered.RData") # load GPDDFiltered.RData
#install.packages("maps")
require(maps) # load maps package
## plot the map
map(database ="world", col="grey", fill=TRUE, bg="white", lwd=0.5, mar=rep(0,4), border=0, ylim=c(-80,80)) # create a world map
for (i in 1:nrow(gpdd)) {
points(gpdd$long[i], gpdd$lat[i], cex = 1.2, pch = 19, col = "red")
}
aspect.ratio = 0.5
Ricker <- function(N0 = 1, r = 1, K = 10, generations = 50){
# Runs a simulation of the Ricker model
# Returns a vector of length generations
N <- rep(NA, generations)  # Creates a vector of NA
N[1] <- N0 # Initialize N[1]
for (t in 2:generations){
N[t] <- N[t-1] * exp(r*(1.0-(N[t-1]/K))) # Ricker model
}
return (N)
}
# plot the figure
plot(Ricker(generations = 10), type = "l")
Ricker <- function(N0 = 1, r = 1, K = 10, generations = 50){
# Runs a simulation of the Ricker model
# Returns a vector of length generations
N <- rep(NA, generations)  # Creates a vector of NA
N[1] <- N0 # Initialize N[1]
for (t in 2:generations){
N[t] <- N[t-1] * exp(r*(1.0-(N[t-1]/K))) # Ricker model
}
return (N)
}
# plot the figure
plot(Ricker(generations = 10), type = "l")
